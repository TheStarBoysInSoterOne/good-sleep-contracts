type Token @entity {
  id: ID!
  owner: Bytes!
  uri: String # string
  approvals: [Approval!]! @derivedFrom(field: "token")
  uriUpdates: [TokenURIUpdated!]! @derivedFrom(field: "token")
  transfers: [Transfer!]! @derivedFrom(field: "token")
}

type Approval @entity {
  id: ID!
  owner: Bytes! # address
  approved: Bytes! # address
  token: Token!
}

type ApprovalForAll @entity {
  id: ID!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
}

type TokenURIUpdated @entity {
  id: ID!
  uri: String! # string
  token: Token!
}

type Transfer @entity {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  token: Token!
}

type FeedRecord @entity {
  id: ID!
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
}

type MultiplierUpdated @entity {
  id: ID!
  oldMultiplier: BigInt! # uint256
  newMultiplier: BigInt! # uint256
}

type RewardWithdrawal @entity {
  id: ID!
  tokenId: BigInt! # uint256
  to: Bytes! # address
  amount: BigInt! # uint256
  time: BigInt! # uint256
}